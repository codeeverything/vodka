{"filter":false,"title":"BinaryBloomFilter.php","tooltip":"/Utils/BinaryBloomFilter.php","undoManager":{"mark":43,"position":43,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":166,"column":1},"action":"insert","lines":["<?php","","class BloomFilter {","","\tprotected $bitField = '';","\tprotected $m;","\tprotected $k;","\t","\t/**","\t * @param int $m Size of the bit field. Actual memory used will be $m/8 bytes.","\t * @param int $k Number of hash functions","\t */\t","\tpublic function __construct($m, $k) {","\t\tif (!is_numeric($m) || !is_numeric($k)) {","\t\t\tthrow new InvalidArgumentException('$m and $k must be integers');","\t\t}","\t\t$this->bitField = $this->initializeBitFieldOfLength($m);","\t\t$this->m = (int)$m;","\t\t$this->k = (int)$k;","\t}","\t","\t/**","\t * Calculates the optimal number of k given m and a","\t * typical number of items to be stored.","\t * ","\t * @param int $m Size of the bit field","\t * @param int $n Typical number of items to insert","\t * @return int Optimal number for k","\t */","\tpublic static function getK($m, $n) {","\t\treturn ceil(($m / $n) * log(2));","\t}","\t","\t/**","\t * Returns an instance based on the bit field size and expected number of stored items.","\t * Automates the calculation of k.","\t * ","\t * @param int $m Bit field size","\t * @param int $n Expected number of stored values","\t * @return BloomFilter","\t */","\tpublic static function constructForTypicalSize($m, $n) {","\t\treturn new self($m, self::getK($m, $n));","\t}","\t","\t/**","\t * Unserializes in instance from an ASCII safe string representation produced by __toString.","\t * ","\t * @param string $string String representation","\t * @return BloomFilter Unserialized instance","\t */","\tpublic static function unserializeFromStringRepresentation($string) {","\t\tif (!preg_match('~k:(?P<k>\\d+)/m:(?P<m>\\d+)\\((?P<bitfield>[0-9a-zA-Z+/=]+)\\)~', $string, $matches)) {","\t\t\tthrow new InvalidArgumentException('Invalid string representation');","\t\t}","\t\t$bf = new self((int)$matches['m'], (int)$matches['k']);","\t\t$bf->bitField = base64_decode($matches['bitfield']);","\t\treturn $bf;","\t}","","\tprotected function initializeBitFieldOfLength($length) {","\t\treturn str_repeat(\"\\x0\", ceil($length / 8));","\t}","\t\t","\tprotected function setBitAtPosition($pos) {","\t\tlist($char, $byte) = $this->position2CharAndByte($pos);","\t\t$this->bitField[$char] = $this->bitField[$char] | $byte;","\t}","\t","\tprotected function getBitAtPosition($pos) {","\t\tlist($char, $byte) = $this->position2CharAndByte($pos);","\t\treturn ($this->bitField[$char] & $byte) === $byte;","\t}","\t","\t/**","\t * Returns a tuple with the char offset into the bitfield string","\t * in index 0 and a bitmask for the specific position in index 1.","\t * E.g.: Position 9 -> (1, \"10000000\") (2nd byte, \"first\" bit)","\t * ","\t * @param int $pos The $pos'th bit in the bit field.","\t * @return array array(int $charOffset, string $bitmask)","\t */","\tprotected function position2CharAndByte($pos) {","\t\tif ($pos > $this->m) {","\t\t\tthrow new InvalidArgumentException(\"\\$pos of $pos beyond bitfield length of $this->m\");","\t\t}","","\t\tstatic $positionMap = array(","\t\t\t8 => \"\\x1\",","\t\t\t7 => \"\\x2\",","\t\t\t6 => \"\\x4\",","\t\t\t5 => \"\\x8\",","\t\t\t4 => \"\\x10\",","\t\t\t3 => \"\\x20\",","\t\t\t2 => \"\\x40\",","\t\t\t1 => \"\\x80\"","\t\t);","\t\t","\t\t$char = ceil($pos / 8) - 1;","\t\t$byte = $positionMap[$pos % 8 ?: 8];","\t\treturn array($char, $byte);","\t}","\t","\t/**","\t * Calculates the positions a value hashes to in the bitfield.","\t * ","\t * @param string $value The value to insert into the bitfield.","\t * @return SqlFixedArray Array containing the numeric positions in the bitfield.","\t */","\tprotected function positions($value) {","\t\tmt_srand(crc32($value));","","\t\t$positions = new SplFixedArray($this->k);","\t\tfor ($i = 0; $i < $this->k; $i++) {","\t\t\t$positions[$i] = mt_rand(1, $this->m);","\t\t}","","\t\treturn $positions;","\t}","\t","\t/**","\t * Add a value into the set.","\t * ","\t * @param string $value","\t */","\tpublic function add($value) {","\t\tforeach ($this->positions($value) as $position) {","\t\t\t$this->setBitAtPosition($position);","\t\t}","\t}","\t","\t/**","\t * Checks if the value may have been added to the set before.","\t * False positives are possible, false negatives are not.","\t * ","\t * @param string $value","\t * @return boolean","\t */","\tpublic function maybeInSet($value) {","\t\tforeach ($this->positions($value) as $position) {","\t\t\tif (!$this->getBitAtPosition($position)) {","\t\t\t\treturn false;","\t\t\t}","\t\t}","\t\treturn true;","\t}","\t","\t/**","\t * Returns an ASCII representation of the current bit field.","\t * ","\t * @return string","\t */","\tpublic function showBitField() {","\t\treturn join(array_map(function ($chr) { return str_pad(base_convert(bin2hex($chr), 16, 2), 8, '0', STR_PAD_LEFT); }, str_split($this->bitField)));","\t}","\t","\t/**","\t * Returns an ASCII safe representation of the BloomFilter object.","\t * This representation can be unserialized using unserializeFromStringRepresentation().","\t * ","\t * @return string","\t */","\tpublic function __toString() {","\t\treturn \"k:$this->k/m:$this->m(\" . base64_encode($this->bitField) . ')';","\t}","\t","}"]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":6},"end":{"row":2,"column":7},"action":"insert","lines":["B"]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":7},"end":{"row":2,"column":8},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":8},"end":{"row":2,"column":9},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":9},"end":{"row":2,"column":10},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":10},"end":{"row":2,"column":11},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":11},"end":{"row":2,"column":12},"action":"insert","lines":["y"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":5},"end":{"row":1,"column":0},"action":"insert","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":0},"end":{"row":2,"column":1},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":1},"end":{"row":2,"column":2},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":2},"end":{"row":2,"column":3},"action":"insert","lines":["m"]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":3},"end":{"row":2,"column":4},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":4},"end":{"row":2,"column":5},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":5},"end":{"row":2,"column":6},"action":"insert","lines":["p"]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":6},"end":{"row":2,"column":7},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":7},"end":{"row":2,"column":8},"action":"insert","lines":["c"]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":8},"end":{"row":2,"column":9},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":9},"end":{"row":2,"column":10},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":10},"end":{"row":2,"column":11},"action":"insert","lines":["U"]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":11},"end":{"row":2,"column":12},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":12},"end":{"row":2,"column":13},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":12},"end":{"row":2,"column":13},"action":"remove","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":11},"end":{"row":2,"column":12},"action":"remove","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":11},"end":{"row":2,"column":12},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":12},"end":{"row":2,"column":13},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":13},"end":{"row":2,"column":14},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":14},"end":{"row":2,"column":15},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":15},"end":{"row":2,"column":16},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":114,"column":19},"end":{"row":114,"column":20},"action":"insert","lines":["\\"]}]}],[{"group":"doc","deltas":[{"start":{"row":3,"column":0},"end":{"row":4,"column":0},"action":"insert","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":4,"column":0},"end":{"row":4,"column":1},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":4,"column":1},"end":{"row":4,"column":2},"action":"insert","lines":["*"]}]}],[{"group":"doc","deltas":[{"start":{"row":4,"column":2},"end":{"row":4,"column":3},"action":"insert","lines":["*"]}]}],[{"group":"doc","deltas":[{"start":{"row":4,"column":3},"end":{"row":5,"column":0},"action":"insert","lines":["",""]},{"start":{"row":5,"column":0},"end":{"row":5,"column":3},"action":"insert","lines":[" * "]}]}],[{"group":"doc","deltas":[{"start":{"row":5,"column":3},"end":{"row":5,"column":4},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":5,"column":4},"end":{"row":5,"column":5},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":5,"column":5},"end":{"row":5,"column":6},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":5,"column":6},"end":{"row":5,"column":7},"action":"insert","lines":[":"]}]}],[{"group":"doc","deltas":[{"start":{"row":5,"column":7},"end":{"row":5,"column":8},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":5,"column":8},"end":{"row":5,"column":73},"action":"insert","lines":["https://github.com/deceze/BloomFilter/blob/master/BloomFilter.php"]}]}],[{"group":"doc","deltas":[{"start":{"row":5,"column":73},"end":{"row":6,"column":0},"action":"insert","lines":["",""]},{"start":{"row":6,"column":0},"end":{"row":6,"column":3},"action":"insert","lines":[" * "]}]}],[{"group":"doc","deltas":[{"start":{"row":6,"column":2},"end":{"row":6,"column":3},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":6,"column":2},"end":{"row":6,"column":3},"action":"insert","lines":["/"]}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":6,"column":3},"end":{"row":6,"column":3},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1428414029000,"hash":"c959e5af5a2c1e0f4ef64354cc1fdc138cf94e5e"}